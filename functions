#!/bin/bash

source config
# config is where data is stored for the functions file, this is in the form of Bash variables

#-------------------#
# General Functions #
#-------------------#

dir_setup () {
# Simple one line function to create a working directory if it doesn't already exist.
# arg 1 is working directory name, this will always be the tool name, ex: annovar 
	if [ -d "$code_base_loc/$1" ]; then
		post_to_log "checked for directory for $1, it exists"
		exit
	else
		(cd $code_base_loc && mkdir $1)
		post_to_log "created directory for $1"
	fi;
}

automated_download () {
# arg 1 is the working directory name, this will always be the tool name, ex: annovar
	eval_type; eval_url; eval_user;
	
	log_check
	dir_setup "$1"

	post_to_log "we have $code_type, $code_url, and $code_user to check"

	case "$code_type" in
	"wget_special" ) 
		post_to_log "I noticed we have a $code_type, attempting an automatic download"
	;;
	"wget_source_forge" ) 
		post_to_log "I noticed we have a $code_type, attempting an automatic download"
		sourceforge_automated_download $1
	;;
	* )	
		post_to_error "code type $code_type does not exist, not source downloaded, exiting"
		break
	;;
	esac
}

current_downloaded_version () {
# just a tail in the working directory to get the latest commit/version/whatever
# arg 1 is working directory name, this will always be the tool name, ex: annovar 
	(cd "$/code_base_loc/$1" && tail -n 1 "${1}_data") 
}

eval_type () {
# evaluates the type of code that we are working on, this is used in the automated download feature
# arg 1 is working directory name, this will always be the tool name, ex: annovar 
	eval code_type=\$"${1}_type"
}

eval_url () {
# evaluates the url using the working directory name
# arg 1 is the working directory name, this will always be the tool name, ex: annovar
    eval code_url=\$"${1}_url"
}

eval_user () {
# evaluates the user using the working directory name
# arg 1 is the working directory name, this will always be the tool name, ex: annovar
	eval code_user=\$"{1}_user"
}

#----------------#
# Wget Functions #
#----------------#

wget_in_dir () {
# wgets the code in the working direcory
# arg 1 is the working directory name, this will always be the tool name, ex: annovar
    ( cd "${code_base_loc}/${1}" && wget $code_url )
	post_to_log "wget on the code for $1"
}

sourceforge_get_info () {
# gets the base of the latest source 
# arg 1 is the working directory name, this will always be the tool name, ex: annovar
# sourceforge.net/projects/bowtie-bio/rss?limit=1&/project=bowtie
	post_to_log "making the curl call for ${1} to url ${code_url}/${code_user}/rss?limit=1&/project=${1}"
	curl "${code_url}/${code_user}/rss?limit=1&/project=${1}" >> temp.html
	eval code_info=`xsltproc sourceforge.xsl temp.html`
	rm temp.html
}

sourceforge_wget_in_dir () {
# actual sourceforge download call 
# arg 1 is the working directory name, this will always be the tool name, ex: annovar
	post_to_log "attempting to to wget ${1}"
	wget_call_loc=`echo $code_info | grep -v '<' | sed -e 's/.*{//' -e 's/}.*//' | sed "s/\/[^\/]*$//"`
	( cd "${code_base_loc}/${1}" && wget $wget_call_loc )

	ver_info=`echo $code_info | grep -v '<' | sed -e 's/.*{//' -e 's/}.*//' | sed "s/\/[^\/]*$//" | sed "s/\/[^\/]*$//" | sed 's/.*\///'`
	( cd "${code_base_loc}/${1}" &&  echo $ver_info >> "${1}_data" )
}

sourceforge_latest () {
# arg 1 is the working directory name, this will always be the tool name, ex: annovar
	 echo $code_info | grep -v '<' | sed -e 's/.*{//' -e 's/}.*//' | sed "s/\/[^\/]*$//" | sed "s/\/[^\/]*$//" | sed 's/.*\///'
}

sourceforge_automated_download () {
# arg 1 is the working directory name, this will always be the tool name, ex: annovar
	sourceforge_get_info $1
	if [ $(current_download_version $1) -ne $(sourceforge_latest $1) ]; then
		post_to_log "latest for $1 on system and latest remote don't match, time for downloads"
		sourceforge_get_info $1
		sourceforge_wget_in_dir $1
	else
		post_to_log "no new code found for $1, good jerb"
	fi  
}

#---------------#
# Log Functions #
#---------------#

log_check () {
# doesn't take any arguments, just checks to make sure that logging is going to work, or its off. 
	if [ "$logging" = "on" ]; then
		[ -d "$log_file" ] || echo "error: log directory \"$log_file\" (log files) not found, quiting"; break
		[ -d "$error_file" ] || echo "error: log directory \"$error_file\" (error files) not found, quiting"; break
	elif [ -z "$logging" ]; then
		echo "ok... no logging then"
	else
		echo "error: \$logging is set to \"$logging\" which is not valid, quiting"
		break
	fi
}

post_to_error () {
	[ "$logging" = "on" ] &&  echo "[$(date)]: $1" >> "$log_file/latest_sauce_$(date +%e_%m_%Y)"
	[ -z "$logging" ] &&  echo "[$(date)]: $1"
}

post_to_log () {
	[ "$logging" = "on" ] && echo "[$(date)]: $1" >> "$error_file/latest_sauce_err_$(date +%e_%m_%Y)"
	[ -z "$logging" ] &&  echo "[$(date)]: $1"
}
